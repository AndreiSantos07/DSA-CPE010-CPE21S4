(3.4)
#include<iostream>
using namespace std;

// This is a doubly linked list, show the data can simply the next or the previous data, we can use the symbol "<->"
// Define the class node in doubly linked list

class Node {
public:
    char data;
    Node *next;
    Node *prev;
};

// The doubly linked list
void ListTraversal(Node* n) 
{
    cout << "Linked List: ";
    while (n != nullptr) 
    {
        cout << n->data;  // Print the node data
        if (n->next != nullptr) {
            cout << " <-> ";  // Print the symbol for the arrow back and forth
        }
        n = n->next;             // Move it to the next
    }
    cout << endl;  // Print the new line output
}

// Function to insert a new node at the head
void InsAtHead(Node** head, char new_data) 
{
    Node* new_node = new Node(); // Create a node for the head to be inserted
    new_node->data = new_data;   // Set data
    new_node->next = (*head);    // Linknew node to the current head
    new_node->prev = nullptr;    // Set prev (or previous) to nullptr
    if ((*head) != nullptr) {
        (*head)->prev = new_node; // updated prev
    }
    (*head) = new_node;          // Move head to the new node
}

// Inserting a new node at any position in the doubly linked list
void InsAtPos(Node* prev_node, char new_data) 
{
    if (prev_node == nullptr) 
    {
        cout << "Previous node cannot be null." << endl;
        return;
    }
    Node* new_node = new Node();  // Create a node for any postion
    new_node->data = new_data;    // Set data
    new_node->next = prev_node->next;  // Link new node to the next
    new_node->prev = prev_node;   // Link the new node to the prev 
    if (prev_node->next != nullptr) 
    {
        prev_node->next->prev = new_node; // Update prev of the next node
    }
    prev_node->next = new_node;   // Link it to the new node
}

// Inserting a new node at the end of the doubly linked list
void InsAtEnd(Node** head, char new_data) 
{
    Node* new_node = new Node();  // Create a node at the end
    new_node->data = new_data;    // Set data
    new_node->next = nullptr;     // This is now the final node
    new_node->prev = nullptr;     // Set prev to nullptr since it's the end

    // If empty, set the head to the new node (follow this condition for if)
    if (*head == nullptr) {
        *head = new_node;
        return;
    }

    // Else, go back to the previous/last node (follow this condition for else)
    Node* last = *head;
    while (last->next != nullptr) 
    {
        last = last->next;
    }

    last->next = new_node;  // Link the last node to the new node
    new_node->prev = last;  // Updated node
}

// Deleting a node from the doubly linked list
void deleno(Node** head, char key) 
{
    Node* temp = *head;
    Node* prev = nullptr;

    if (temp != nullptr && temp->data == key) 
    {
        *head = temp->next; // Change the head to the next node
        if (*head != nullptr) {
            (*head)->prev = nullptr; // Update prev of the new head
        }
        delete temp;        // delete the old head
        return;
    }

    while (temp != nullptr && temp->data != key) 
    {
        prev = temp;
        temp = temp->next;
    }

    if (temp == nullptr) 
    {
        cout << "Key not found." << endl;
        return;
    }


    prev->next = temp->next;
    if (temp->next != nullptr) 
    {
        temp->next->prev = prev; // Update the previous to the new code
    }
    delete temp; // delete the temporary data in the linked list
}

int main() {
    // Initialize an empty linked list, showing a null
    Node* head = nullptr;

    // Step 1: Insert data into the list (CPE 101)
    InsAtEnd(&head, 'C');
    InsAtEnd(&head, 'P');
    InsAtEnd(&head, 'E');
    InsAtEnd(&head, '1');
    InsAtEnd(&head, '0');
    InsAtEnd(&head, '1');

    // Print the linked list
    ListTraversal(head);

    // Insert a new node at the head (I want the letter A)
    InsAtHead(&head, 'A');

    // Print the linked list
    ListTraversal(head);

    // Insert a new node at a specific position (Letter N here)
    InsAtPos(head->next, 'N');

    //Print the linked list
    ListTraversal(head);

    //Delete a node from the list (Now, remove the letter E)
    deleno(&head, 'E');

    //Print the linked list
    ListTraversal(head);
    

    return 0;
}

