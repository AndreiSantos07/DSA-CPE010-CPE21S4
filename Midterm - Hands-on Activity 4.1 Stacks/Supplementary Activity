#include <iostream>
using namespace std;

// creating a class for node
class Node {
public:
    char data;
    Node* next;
};

// Linked List Class
class Lin_Lis_Stack {
    Node* top; 
public:
    Lin_Lis_Stack() : top(nullptr) {}

    // Push character onto stack
    void push(char item) {
        Node* newNode = new Node{item, top}; // Create new node
        top = newNode; // Update the top as the new node
    }

    // Pop character from stack
    char pop() {
        if (!top) return '\0'; // Return null if stack is empty thjat is why '\0'
        Node* temp = top;
        char popped = temp->data;
        top = top->next;
        delete temp; // delete the temp
        return popped; // return the pop to avoid empty
    }

    // Check if stack is empty
    bool isEmpty() {
        return !top;
    }
};

// Array Stack Class
class Arr_Stck {
    int top;
    int capacity;
    char* stackArray;
public:
    Arr_Stck(int size) : capacity(size), top(-1) {
        stackArray = new char[capacity]; // assign the memory
    }

    ~Arr_Stck() {
        delete[] stackArray; // now, delete the memory
    }

    void push(char item) {
        if (top < capacity - 1) 
            stackArray[++top] = item;
    }

    char pop() {
        if (top >= 0) return stackArray[top--]; // Return item
        return '\0'; // Return null if empty
    }

    bool isEmpty() {
        return top == -1; // Return if empty
    }
};

// Function to check balanced symbols using Linked List Stack
bool Check_Expr_Lin_Lis(string expr) {
    Lin_Lis_Stack stack;
    for (char ch : expr) {
        if (ch == '(' || ch == '{' || ch == '[') stack.push(ch); // Push opening symbols
        else if (ch == ')' || ch == '}' || ch == ']') {
            if (stack.isEmpty() || 
                (ch == ')' && stack.pop() != '(') ||
                (ch == '}' && stack.pop() != '{') ||
                (ch == ']' && stack.pop() != '[')) 
                return false;
        }
    }
    return stack.isEmpty(); // Return if it is balanced
}

// Function bool to check balanced symbols using Array Stack
bool Check_Expr_Array(string expr) {
    Arr_Stck stack(expr.length()); // Create stack based on expression length
    for (char ch : expr) {
        if (ch == '(' || ch == '{' || ch == '[') stack.push(ch); // Push symbols
        else if (ch == ')' || ch == '}' || ch == ']') {
            if (stack.isEmpty() || 
                (ch == ')' && stack.pop() != '(') ||
                (ch == '}' && stack.pop() != '{') ||
                (ch == ']' && stack.pop() != '[')) 
                return false;
        }
    }
    return stack.isEmpty(); // Return if balanced
}

int main() {
    string expr = "(A+B)+(C-D)"; // This will be the example expression that will be checked
    cout << "This is the expression: " << expr << endl;

    // Check expression for balanced symbols using Linked List
    if (Check_Expr_Lin_Lis(expr)) {
        cout << "The expression is balanced using Linked List!" << endl; // This will be printed if the expr is balanced with the use of linked list
    } else {
        cout << "The expression is not balanced using Linked List, check your error." << endl; // This will be printed if the expr is not balanced with the use of linked list
    }

    // Check expression for balanced symbols using Array
    if (Check_Expr_Array(expr)) {
        cout << "The expression is balanced using Array!" << endl; // This will be printed if the expr is balanced with the use of array
    } else {
        cout << "The expression is not balanced using Array, check your error." << endl; // This will be printed if the expr is not balanced with the use of array
    }

    return 0;
}
